#1 Tests_Final/Ch03/Mutation/Commented_Code\Disjoint\mutation_1_line_no_6_COI.py
Bug: Yes
Description: There is a bug in the code that causes it to return False if there is a common value between two of the lists, rather than all three lists.
Code Snippet: def disjoint1(A, B, C):
  """Return True if there is no element common to all three lists."""
  for a in A:
    for b in B:
      for c in C:
        if not (a == b == c):
          return False      # we found a common value
  return True


#2 Tests_Final/Ch03/Mutation/Commented_Code\Disjoint\mutation_2_line_no_6_ROR.py
Bug: No
Description: The code returns True if there is no element common to all three lists and False if there is an element common to all three lists.
Code Snippet: def disjoint1(A, B, C):
  """Return True if there is no element common to all three lists."""
  for a in A:
    for b in B:
      for c in C:
        if a == b == c:
          return False      # we found a common value
  return True               # if we reach this, sets are disjoint


#3 Tests_Final/Ch03/Mutation/Commented_Code\Disjoint\mutation_3_line_no_6_ROR.py
Bug: No
Description: Returns True if there is no element common to all three lists.
Code Snippet: def disjoint1(A, B, C):
  """Return True if there is no element common to all three lists."""
  for a in A:
    for b in B:
      for c in C:
        if a == b and b != c:
          return False      # we found a common value
  return True               # if we reach this, sets are disjoint


#4 Tests_Final/Ch03/Mutation/Commented_Code\FInd\mutation_1_line_no_9_AOD.py
Bug: Yes
 Description: The bug is that the code should return -1 if no such element is found, but it returns 1.
 Code Snippet: def find(S, val):
  """Return index j such that S[j] == val, or -1 if no such element."""
  n = len(S)
  j = 0
  while j < n:
    if S[j] == val:
      return j          # a match was found at index j
    j += 1
  return -1


#5 Tests_Final/Ch03/Mutation/Commented_Code\FInd\mutation_2_line_no_9_AOR.py
Bug: Yes
Description: find() should return -1 if no such element is found
Code Snippet: def find(S, val):
  """Return index j such that S[j] == val, or -1 if no such element."""
  n = len(S)
  j = 0
  while j < n:
    if S[j] == val:
      return j          # a match was found at index j
    j += 1
  return -1


#6 Tests_Final/Ch03/Mutation/Commented_Code\FInd\mutation_3_line_no_8_ASR.py
Bug: No
Description:

This code snippet correctly finds the index of a given value in a list.


#7 Tests_Final/Ch03/Mutation/Commented_Code\FInd\mutation_4_line_no_5_COI.py
Bug: Yes
Description: The condition in the while loop is incorrect. It should be while j < n.
Code Snippet: def find(S, val):
  """Return index j such that S[j] == val, or -1 if no such element."""
  n = len(S)
  j = 0
  while j < n:
    if S[j] == val:
      return j          # a match was found at index j
    j += 1
  return -1


#8 Tests_Final/Ch03/Mutation/Commented_Code\FInd\mutation_5_line_no_6_COI.py
Bug: No
Description: Code correctly finds and returns the index of val in S, or -1 if no such element is found.
Code Snippet: N/A


#9 Tests_Final/Ch03/Mutation/Commented_Code\FInd\mutation_6_line_no_5_ROR.py
Bug: Yes
Description: S[j] will never be equal to val because j is always greater than n.
Code Snippet:

def find(S, val):
  """Return index j such that S[j] == val, or -1 if no such element."""
  n = len(S)
  j = 0
  while j < n:
    if S[j] == val:
      return j          # a match was found at index j
    j += 1
  return -1


#10 Tests_Final/Ch03/Mutation/Commented_Code\FInd\mutation_7_line_no_5_ROR.py
Bug: No
Description: The code is finding the index of a given value in a sequence.
Code Snippet: N/A


#11 Tests_Final/Ch03/Mutation/Commented_Code\FInd\mutation_8_line_no_6_ROR.py
Bug: No
Description: Returns the index of the first element in the sequence that is equal to the value, or -1 if the value is not found
Code Snippet: [Corrected Code]


#12 Tests_Final/Ch03/Mutation/Commented_Code\Find_max\mutation_1_line_no_5_COI.py
Bug: No 
 Description: The code correctly finds the maximum value in a list. 
 Code Snippet: N/A


#13 Tests_Final/Ch03/Mutation/Commented_Code\Find_max\mutation_2_line_no_5_ROR.py
Bug: No
Description: Function correctly finds maximum element in a list.
Code Snippet: N/A


#14 Tests_Final/Ch03/Mutation/Commented_Code\Find_max\mutation_3_line_no_5_ROR.py
Bug: No
Description: The code correctly finds the maximum element from a nonempty Python list.
Code Snippet: N/A


#15 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_10_line_no_15_AOR.py
Bug: No
Description: calculate the average for a prefix
Code Snippet: def prefix_average1(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] * n                     # create new list of n zeros
  for j in range(n):
    total = 0                     # begin computing S[0] + ... + S[j]
    for i in range(j + 1):
      total += S[i]
    A[j] = total / (j+1)          # record the average


#16 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_11_line_no_17_AOR.py
Bug: No
Description: The code produces the desired outcome of computing the prefix sum of a list.
Code Snippet: N/A


#17 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_12_line_no_17_AOR.py
Bug: No
Description: The code returns a list such that, for all j, A[j] equals average of S[0], ..., S[j].
Code Snippet: def prefix_average1(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] * n                     # create new list of n zeros
  for j in range(n):
    total = 0                     # begin computing S[0] + ... + S[j]
    for i in range(j + 1):
      total +=


#18 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_13_line_no_17_AOR.py
Yes
Description: The code fails to prefix average when given a list of floats
Code Snippet: A = [0.0] * n


#19 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_14_line_no_17_AOR.py
Yes
Description: The code is incorrect because it does not iterate over the entire list.
Code Snippet:

def prefix_average1(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] * n                     # create new list of n zeros
  for j in range(n):
    total = 0                     # begin computing S[0] + ... + S[j]
    for i in range(j + 1):
      total += S[i]
    A[j] = total / (


#20 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_15_line_no_23_AOR.py
Bug: Yes
 Description: The last line in the code should be "return A" not "return total/A"
 Code Snippet:

def prefix_average3(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] / n
  total = 0                     # compute prefix sum as S[0] + S[1] + ...
  for j in range(n):
    total += S[j]               # update prefix sum to include S[j]
    A[j] = total / (j+


#21 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_16_line_no_23_AOR.py
No
Description: You cannot divide by 0
Code Snippet: A = [0] * n


#22 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_17_line_no_23_AOR.py
Bug: Yes
Description: Code Snippet 3 is incorrect because it sets the list A to be a list of n zeroes raised to the nth power instead of just n zeroes.
Code Snippet: [Corrected Code]

def prefix_average3(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] * n
  total = 0                     # compute prefix sum as S[0] + S[1] + ...
  for j in range(n):
    total += S[j]


#23 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_18_line_no_27_AOR.py
Bug: No
Description: The code creates a list of zeros, then iterates through the list to total the previous values and update each entry with the average.
Code Snippet: n = len(S)
A = [0] * n
for j in range(n):
  A[j] = sum(S[0:j+1]) / (j+1)


#24 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_19_line_no_27_AOR.py
Bug: No
Description: The code calculates the prefix sum of a list.
Code Snippet: def prefix_average3(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] * n                   # create new list of n zeros
  total = 0                     # compute prefix sum as S[0] + S[1] + ...
  for j in range(n):
    total += S[j]               # update prefix sum to include S[j]
    A[j] = total / (j + 1)


#25 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_1_line_no_4_AOR.py
Bug: No
Description: The three functions above compute the prefix averages of a given sequence in linear time.
Code Snippet: N/A


#26 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_20_line_no_27_AOR.py
Bug: Yes
Description: The code should read "A[j] = total / (j+1)," not "A[j] = total / (j - 1)." 
Code Snippet: [Corrected Code]

def prefix_average3(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] * n                   # create new list of n zeros
  total = 0                     # compute prefix sum as S[0] + S[1] + ...
  for j in range(n):
    total


#27 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_21_line_no_8_ASR.py
(a)Bug: No 
Description: the code calculates the prefix sum of a list 
Code Snippet:


#28 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_22_line_no_26_ASR.py
Bug: No
Description: The code correctly calculates the prefix average.
Code Snippet: N/A


#29 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_23_line_no_17_SIR.py
Bug: No
Description: The code correctly implements the prefix average algorithm.
Code Snippet: N/A


#30 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_24_line_no_17_SIR.py
Bug: No
Description: The code produces the desired outcome
Code Snippet: N/A


#31 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_2_line_no_4_AOR.py
Bug: No
Description: The code correctly computes the prefix average of a given list.
Code Snippet: N/A


#32 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_3_line_no_4_AOR.py
Yes
Description: The code should create a list of n zeros.
Code Snippet: A = [0] * n


#33 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_4_line_no_7_AOR.py
Yes
Description: The code should iterate through the list and average the previous values including the current value Code Snippet: 

def prefix_average3(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] * n                   # create new list of n zeros
  total = 0                     # compute prefix sum as S[0] + S[1] + ...
  for j in range(n):
    total += S[j]               # update prefix sum to include S[j]
    A[j] =


#34 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_5_line_no_9_AOR.py
The bug is: No

Description: There is no bug in the code. The three functions provided compute the prefix average of a given list S in three different ways.

Code Snippet: N/A


#35 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_6_line_no_9_AOR.py
Bug: No
Description: None
Code Snippet: None


#36 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_7_line_no_9_AOR.py
Yes
Description: The code should have used "j+1" in the denominator instead of "j-1"
Code Snippet: A[j] = total / (j + 1)


#37 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_8_line_no_15_AOR.py
Bug: No
Description: Creates a list of prefix averages.
Code Snippet:

def prefix_average1(S):
  """Return list such that, for all j, A[j] equals average of S[0], ..., S[j]."""
  n = len(S)
  A = [0] * n                     # create new list of n zeros
  for j in range(n):
    total = 0                     # begin computing S[0] + ... + S[j]
    for i in range(j + 1):
      total += S[i]
    A[j] = total / (j+1)


#38 Tests_Final/Ch03/Mutation/Commented_Code\Prefix_averages\mutation_9_line_no_15_AOR.py
Bug: No
Description: The code correctly computes the prefix average of a given list.
Code Snippet: N/A


#39 Tests_Final/Ch03/Mutation/Commented_Code\Unique\mutation_1_line_no_4_AOR.py
Bug: No
Description: The code correctly determines if there are any duplicate elements in a sequence.
Code Snippet: N/A


#40 Tests_Final/Ch03/Mutation/Commented_Code\Unique\mutation_2_line_no_13_AOR.py
Bug: No
Description:

This code correctly determines if a given sequence has duplicate elements or not.


#41 Tests_Final/Ch03/Mutation/Commented_Code\Unique\mutation_3_line_no_5_COI.py
Bug: No
Description: Determines if there are duplicates in a given sequence
Code Snippet: def unique1(S):
  """Return True if there are no duplicate elements in sequence S."""
  for j in range(len(S)):
    for k in range(j+1, len(S)):
      if (S[j] == S[k]):
        return False              # found duplicate pair
  return True                     # if we reach this, elements were unique

def unique2(S):
  """Return True if there are no duplicate elements in sequence S."""
  temp = sorted(S)                # create a sorted copy of


#42 Tests_Final/Ch03/Mutation/Commented_Code\Unique\mutation_4_line_no_13_COI.py
Bug: No
Description: Code determines if there are any duplicate elements in a given sequence S.
Code Snippet: def unique1(S):
  """Return True if there are no duplicate elements in sequence S."""
  for j in range(len(S)):
    for k in range(j+1, len(S)):
      if S[j] == S[k]:
        return False              # found duplicate pair
  return True                     # if we reach this, elements were unique

def unique2(S):
  """Return True if there are no duplicate elements in sequence S."""
  temp = sorted(S)                # create a sorted copy


#43 Tests_Final/Ch03/Mutation/Commented_Code\Unique\mutation_5_line_no_5_ROR.py
Bug: No
Description: Checks for duplicates in a sequence
Code Snippet: def unique1(S):
  """Return True if there are no duplicate elements in sequence S."""
  for j in range(len(S)):
    for k in range(j+1, len(S)):
      if S[j] == S[k]:
        return False              # found duplicate pair
  return True                     # if we reach this, elements were unique

def unique2(S):
  """Return True if there are no duplicate elements in sequence S."""
  temp = sorted(S)                # create a sorted copy of S
  for j in


#44 Tests_Final/Ch03/Mutation/Commented_Code\Unique\mutation_6_line_no_13_ROR.py
Bug: No
Description: The code checks for duplicates in a sequence and returns True if there are no duplicates.
Code Snippet: def unique3(S):
  """Return True if there are no duplicate elements in sequence S."""
  for j in range(len(S)):
    for k in range(j+1, len(S)):
      if S[j] == S[k]:
        return False              # found duplicate pair
  return True


