[*] Start mutation process:
   - targets: ch04/No_Comments/binary_search_iterative.py
   - tests: tests_Final/ch04/test_binary_search_iterative.py
[*] 9 tests passed:
   - test_binary_search_iterative [0.00000 s]
[*] Start mutants generation and execution:
   - [#   1] AOR binary_search_iterative: 
--------------------------------------------------------------------------------
   1: def binary_search_iterative(data, target):
   2:     low = 0
-  3:     high = len(data) - 1
+  3:     high = len(data) + 1
   4:     while low <= high:
   5:         mid = (low + high) // 2
   6:         if target == data[mid]:
   7:             return True
--------------------------------------------------------------------------------
[0.00097 s] killed by test_empty_list (test_binary_search_iterative.TestBinarySearchIterative)
   - [#   2] AOR binary_search_iterative: 
--------------------------------------------------------------------------------
   1: def binary_search_iterative(data, target):
   2:     low = 0
   3:     high = len(data) - 1
   4:     while low <= high:
-  5:         mid = (low + high) // 2
+  5:         mid = (low - high) // 2
   6:         if target == data[mid]:
   7:             return True
   8:         elif target < data[mid]:
   9:             high = mid - 1
--------------------------------------------------------------------------------
[5.05463 s] timeout
   - [#   3] AOR binary_search_iterative: 
--------------------------------------------------------------------------------
   1: def binary_search_iterative(data, target):
   2:     low = 0
   3:     high = len(data) - 1
   4:     while low <= high:
-  5:         mid = (low + high) // 2
+  5:         mid = (low + high) / 2
   6:         if target == data[mid]:
   7:             return True
   8:         elif target < data[mid]:
   9:             high = mid - 1
--------------------------------------------------------------------------------
[0.00102 s] incompetent
   - [#   4] AOR binary_search_iterative: 
--------------------------------------------------------------------------------
   1: def binary_search_iterative(data, target):
   2:     low = 0
   3:     high = len(data) - 1
   4:     while low <= high:
-  5:         mid = (low + high) // 2
+  5:         mid = (low + high) * 2
   6:         if target == data[mid]:
   7:             return True
   8:         elif target < data[mid]:
   9:             high = mid - 1
--------------------------------------------------------------------------------
[0.00103 s] killed by test_even_length_list_found (test_binary_search_iterative.TestBinarySearchIterative)
   - [#   5] AOR binary_search_iterative: 
--------------------------------------------------------------------------------
   5:         mid = (low + high) // 2
   6:         if target == data[mid]:
   7:             return True
   8:         elif target < data[mid]:
-  9:             high = mid - 1
+  9:             high = mid + 1
  10:         else:
  11:             low = mid + 1
  12:     return False
--------------------------------------------------------------------------------
[5.04197 s] timeout
   - [#   6] AOR binary_search_iterative: 
--------------------------------------------------------------------------------
   7:             return True
   8:         elif target < data[mid]:
   9:             high = mid - 1
  10:         else:
- 11:             low = mid + 1
+ 11:             low = mid - 1
  12:     return False
--------------------------------------------------------------------------------
[5.03104 s] timeout
   - [#   7] COI binary_search_iterative: 
--------------------------------------------------------------------------------
   1: def binary_search_iterative(data, target):
   2:     low = 0
   3:     high = len(data) - 1
-  4:     while low <= high:
+  4:     while not (low <= high):
   5:         mid = (low + high) // 2
   6:         if target == data[mid]:
   7:             return True
   8:         elif target < data[mid]:
--------------------------------------------------------------------------------
[0.00104 s] killed by test_empty_list (test_binary_search_iterative.TestBinarySearchIterative)
   - [#   8] COI binary_search_iterative: 
--------------------------------------------------------------------------------
   2:     low = 0
   3:     high = len(data) - 1
   4:     while low <= high:
   5:         mid = (low + high) // 2
-  6:         if target == data[mid]:
+  6:         if not (target == data[mid]):
   7:             return True
   8:         elif target < data[mid]:
   9:             high = mid - 1
  10:         else:
--------------------------------------------------------------------------------
[0.00099 s] killed by test_even_length_list_not_found (test_binary_search_iterative.TestBinarySearchIterative)
   - [#   9] COI binary_search_iterative: 
--------------------------------------------------------------------------------
   4:     while low <= high:
   5:         mid = (low + high) // 2
   6:         if target == data[mid]:
   7:             return True
-  8:         elif target < data[mid]:
+  8:         elif not (target < data[mid]):
   9:             high = mid - 1
  10:         else:
  11:             low = mid + 1
  12:     return False
--------------------------------------------------------------------------------
[0.00109 s] killed by test_even_length_list_found (test_binary_search_iterative.TestBinarySearchIterative)
   - [#  10] ROR binary_search_iterative: 
--------------------------------------------------------------------------------
   1: def binary_search_iterative(data, target):
   2:     low = 0
   3:     high = len(data) - 1
-  4:     while low <= high:
+  4:     while low >= high:
   5:         mid = (low + high) // 2
   6:         if target == data[mid]:
   7:             return True
   8:         elif target < data[mid]:
--------------------------------------------------------------------------------
[0.00102 s] killed by test_empty_list (test_binary_search_iterative.TestBinarySearchIterative)
   - [#  11] ROR binary_search_iterative: 
--------------------------------------------------------------------------------
   1: def binary_search_iterative(data, target):
   2:     low = 0
   3:     high = len(data) - 1
-  4:     while low <= high:
+  4:     while low < high:
   5:         mid = (low + high) // 2
   6:         if target == data[mid]:
   7:             return True
   8:         elif target < data[mid]:
--------------------------------------------------------------------------------
[0.00131 s] killed by test_single_element_found (test_binary_search_iterative.TestBinarySearchIterative)
   - [#  12] ROR binary_search_iterative: 
--------------------------------------------------------------------------------
   2:     low = 0
   3:     high = len(data) - 1
   4:     while low <= high:
   5:         mid = (low + high) // 2
-  6:         if target == data[mid]:
+  6:         if target != data[mid]:
   7:             return True
   8:         elif target < data[mid]:
   9:             high = mid - 1
  10:         else:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_not_found (test_binary_search_iterative.TestBinarySearchIterative)
   - [#  13] ROR binary_search_iterative: 
--------------------------------------------------------------------------------
   4:     while low <= high:
   5:         mid = (low + high) // 2
   6:         if target == data[mid]:
   7:             return True
-  8:         elif target < data[mid]:
+  8:         elif target > data[mid]:
   9:             high = mid - 1
  10:         else:
  11:             low = mid + 1
  12:     return False
--------------------------------------------------------------------------------
[0.00100 s] killed by test_even_length_list_found (test_binary_search_iterative.TestBinarySearchIterative)
   - [#  14] ROR binary_search_iterative: 
--------------------------------------------------------------------------------
   4:     while low <= high:
   5:         mid = (low + high) // 2
   6:         if target == data[mid]:
   7:             return True
-  8:         elif target < data[mid]:
+  8:         elif target <= data[mid]:
   9:             high = mid - 1
  10:         else:
  11:             low = mid + 1
  12:     return False
--------------------------------------------------------------------------------
[0.00100 s] survived
[*] Mutation score [15.23969 s]: 92.3%
   - all: 14
   - killed: 9 (64.3%)
   - survived: 1 (7.1%)
   - incompetent: 1 (7.1%)
   - timeout: 3 (21.4%)
