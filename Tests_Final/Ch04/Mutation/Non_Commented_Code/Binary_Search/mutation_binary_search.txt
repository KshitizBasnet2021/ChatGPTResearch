[*] Start mutation process:
   - targets: ch04/No_Comments/binary_search.py
   - tests: tests_Final/ch04/test_binary_search.py
[*] 9 tests passed:
   - test_binary_search [0.00000 s]
[*] Start mutants generation and execution:
   - [#   1] AOR binary_search: 
--------------------------------------------------------------------------------
   2:     
   3:     if low > high:
   4:         return False
   5:     else:
-  6:         mid = (low + high) // 2
+  6:         mid = (low - high) // 2
   7:         if target == data[mid]:
   8:             return True
   9:         elif target < data[mid]:
  10:             return binary_search(data, target, low, mid - 1)
--------------------------------------------------------------------------------
[0.18750 s] killed by test_large_list_not_found (test_binary_search.TestBinarySearch)
   - [#   2] AOR binary_search: 
--------------------------------------------------------------------------------
   2:     
   3:     if low > high:
   4:         return False
   5:     else:
-  6:         mid = (low + high) // 2
+  6:         mid = (low + high) / 2
   7:         if target == data[mid]:
   8:             return True
   9:         elif target < data[mid]:
  10:             return binary_search(data, target, low, mid - 1)
--------------------------------------------------------------------------------
[0.00000 s] incompetent
   - [#   3] AOR binary_search: 
--------------------------------------------------------------------------------
   2:     
   3:     if low > high:
   4:         return False
   5:     else:
-  6:         mid = (low + high) // 2
+  6:         mid = (low + high) * 2
   7:         if target == data[mid]:
   8:             return True
   9:         elif target < data[mid]:
  10:             return binary_search(data, target, low, mid - 1)
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_found (test_binary_search.TestBinarySearch)
   - [#   4] AOR binary_search: 
--------------------------------------------------------------------------------
   6:         mid = (low + high) // 2
   7:         if target == data[mid]:
   8:             return True
   9:         elif target < data[mid]:
- 10:             return binary_search(data, target, low, mid - 1)
+ 10:             return binary_search(data, target, low, mid + 1)
  11:         else:
  12:             return binary_search(data, target, mid + 1, high)
--------------------------------------------------------------------------------
[0.18750 s] killed by test_even_length_list_not_found (test_binary_search.TestBinarySearch)
   - [#   5] AOR binary_search: 
--------------------------------------------------------------------------------
   8:             return True
   9:         elif target < data[mid]:
  10:             return binary_search(data, target, low, mid - 1)
  11:         else:
- 12:             return binary_search(data, target, mid + 1, high)
+ 12:             return binary_search(data, target, mid - 1, high)
--------------------------------------------------------------------------------
[0.20852 s] killed by test_even_length_list_found (test_binary_search.TestBinarySearch)
   - [#   6] COI binary_search: 
--------------------------------------------------------------------------------
   1: def binary_search(data, target, low, high):
   2:     
-  3:     if low > high:
+  3:     if not (low > high):
   4:         return False
   5:     else:
   6:         mid = (low + high) // 2
   7:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_empty_list (test_binary_search.TestBinarySearch)
   - [#   7] COI binary_search: 
--------------------------------------------------------------------------------
   3:     if low > high:
   4:         return False
   5:     else:
   6:         mid = (low + high) // 2
-  7:         if target == data[mid]:
+  7:         if not (target == data[mid]):
   8:             return True
   9:         elif target < data[mid]:
  10:             return binary_search(data, target, low, mid - 1)
  11:         else:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_not_found (test_binary_search.TestBinarySearch)
   - [#   8] COI binary_search: 
--------------------------------------------------------------------------------
   5:     else:
   6:         mid = (low + high) // 2
   7:         if target == data[mid]:
   8:             return True
-  9:         elif target < data[mid]:
+  9:         elif not (target < data[mid]):
  10:             return binary_search(data, target, low, mid - 1)
  11:         else:
  12:             return binary_search(data, target, mid + 1, high)
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_found (test_binary_search.TestBinarySearch)
   - [#   9] ROR binary_search: 
--------------------------------------------------------------------------------
   1: def binary_search(data, target, low, high):
   2:     
-  3:     if low > high:
+  3:     if low < high:
   4:         return False
   5:     else:
   6:         mid = (low + high) // 2
   7:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_empty_list (test_binary_search.TestBinarySearch)
   - [#  10] ROR binary_search: 
--------------------------------------------------------------------------------
   1: def binary_search(data, target, low, high):
   2:     
-  3:     if low > high:
+  3:     if low >= high:
   4:         return False
   5:     else:
   6:         mid = (low + high) // 2
   7:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_single_element_found (test_binary_search.TestBinarySearch)
   - [#  11] ROR binary_search: 
--------------------------------------------------------------------------------
   3:     if low > high:
   4:         return False
   5:     else:
   6:         mid = (low + high) // 2
-  7:         if target == data[mid]:
+  7:         if target != data[mid]:
   8:             return True
   9:         elif target < data[mid]:
  10:             return binary_search(data, target, low, mid - 1)
  11:         else:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_not_found (test_binary_search.TestBinarySearch)
   - [#  12] ROR binary_search: 
--------------------------------------------------------------------------------
   5:     else:
   6:         mid = (low + high) // 2
   7:         if target == data[mid]:
   8:             return True
-  9:         elif target < data[mid]:
+  9:         elif target > data[mid]:
  10:             return binary_search(data, target, low, mid - 1)
  11:         else:
  12:             return binary_search(data, target, mid + 1, high)
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_found (test_binary_search.TestBinarySearch)
   - [#  13] ROR binary_search: 
--------------------------------------------------------------------------------
   5:     else:
   6:         mid = (low + high) // 2
   7:         if target == data[mid]:
   8:             return True
-  9:         elif target < data[mid]:
+  9:         elif target <= data[mid]:
  10:             return binary_search(data, target, low, mid - 1)
  11:         else:
  12:             return binary_search(data, target, mid + 1, high)
--------------------------------------------------------------------------------
[0.00000 s] survived
[*] Mutation score [0.67727 s]: 91.7%
   - all: 13
   - killed: 11 (84.6%)
   - survived: 1 (7.7%)
   - incompetent: 1 (7.7%)
   - timeout: 0 (0.0%)
