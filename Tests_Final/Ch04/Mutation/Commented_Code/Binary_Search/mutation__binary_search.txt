[*] Start mutation process:
   - targets: ch04/binary_search.py
   - tests: tests_Final/ch04/test_binary_search.py
[*] 9 tests passed:
   - test_binary_search [0.00000 s]
[*] Start mutants generation and execution:
   - [#   1] AOR binary_search: 
--------------------------------------------------------------------------------
   5:   '''
   6:     if low > high:
   7:         return False
   8:     else:
-  9:         mid = (low + high) // 2
+  9:         mid = (low - high) // 2
  10:         if target == data[mid]:
  11:             return True
  12:         elif target < data[mid]:
  13:             
--------------------------------------------------------------------------------
[0.19087 s] killed by test_large_list_not_found (test_binary_search.TestBinarySearch)
   - [#   2] AOR binary_search: 
--------------------------------------------------------------------------------
   5:   '''
   6:     if low > high:
   7:         return False
   8:     else:
-  9:         mid = (low + high) // 2
+  9:         mid = (low + high) / 2
  10:         if target == data[mid]:
  11:             return True
  12:         elif target < data[mid]:
  13:             
--------------------------------------------------------------------------------
[0.00000 s] incompetent
   - [#   3] AOR binary_search: 
--------------------------------------------------------------------------------
   5:   '''
   6:     if low > high:
   7:         return False
   8:     else:
-  9:         mid = (low + high) // 2
+  9:         mid = (low + high) * 2
  10:         if target == data[mid]:
  11:             return True
  12:         elif target < data[mid]:
  13:             
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_found (test_binary_search.TestBinarySearch)
   - [#   4] AOR binary_search: 
--------------------------------------------------------------------------------
  10:         if target == data[mid]:
  11:             return True
  12:         elif target < data[mid]:
  13:             
- 14:             return binary_search(data, target, low, mid - 1)
+ 14:             return binary_search(data, target, low, mid + 1)
  15:         else:
  16:             
  17:             return binary_search(data, target, mid + 1, high)
--------------------------------------------------------------------------------
[0.17191 s] killed by test_even_length_list_not_found (test_binary_search.TestBinarySearch)
   - [#   5] AOR binary_search: 
--------------------------------------------------------------------------------
  13:             
  14:             return binary_search(data, target, low, mid - 1)
  15:         else:
  16:             
- 17:             return binary_search(data, target, mid + 1, high)
+ 17:             return binary_search(data, target, mid - 1, high)
--------------------------------------------------------------------------------
[0.19158 s] killed by test_even_length_list_found (test_binary_search.TestBinarySearch)
   - [#   6] COI binary_search: 
--------------------------------------------------------------------------------
   2:     '''Return True if target is found in indicated portion of a Python list.
   3: 
   4:   The search only considers the portion from data[low] to data[high] inclusive.
   5:   '''
-  6:     if low > high:
+  6:     if not (low > high):
   7:         return False
   8:     else:
   9:         mid = (low + high) // 2
  10:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_empty_list (test_binary_search.TestBinarySearch)
   - [#   7] COI binary_search: 
--------------------------------------------------------------------------------
   6:     if low > high:
   7:         return False
   8:     else:
   9:         mid = (low + high) // 2
- 10:         if target == data[mid]:
+ 10:         if not (target == data[mid]):
  11:             return True
  12:         elif target < data[mid]:
  13:             
  14:             return binary_search(data, target, low, mid - 1)
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_not_found (test_binary_search.TestBinarySearch)
   - [#   8] COI binary_search: 
--------------------------------------------------------------------------------
   8:     else:
   9:         mid = (low + high) // 2
  10:         if target == data[mid]:
  11:             return True
- 12:         elif target < data[mid]:
+ 12:         elif not (target < data[mid]):
  13:             
  14:             return binary_search(data, target, low, mid - 1)
  15:         else:
  16:             
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_found (test_binary_search.TestBinarySearch)
   - [#   9] ROR binary_search: 
--------------------------------------------------------------------------------
   2:     '''Return True if target is found in indicated portion of a Python list.
   3: 
   4:   The search only considers the portion from data[low] to data[high] inclusive.
   5:   '''
-  6:     if low > high:
+  6:     if low < high:
   7:         return False
   8:     else:
   9:         mid = (low + high) // 2
  10:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_empty_list (test_binary_search.TestBinarySearch)
   - [#  10] ROR binary_search: 
--------------------------------------------------------------------------------
   2:     '''Return True if target is found in indicated portion of a Python list.
   3: 
   4:   The search only considers the portion from data[low] to data[high] inclusive.
   5:   '''
-  6:     if low > high:
+  6:     if low >= high:
   7:         return False
   8:     else:
   9:         mid = (low + high) // 2
  10:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_single_element_found (test_binary_search.TestBinarySearch)
   - [#  11] ROR binary_search: 
--------------------------------------------------------------------------------
   6:     if low > high:
   7:         return False
   8:     else:
   9:         mid = (low + high) // 2
- 10:         if target == data[mid]:
+ 10:         if target != data[mid]:
  11:             return True
  12:         elif target < data[mid]:
  13:             
  14:             return binary_search(data, target, low, mid - 1)
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_not_found (test_binary_search.TestBinarySearch)
   - [#  12] ROR binary_search: 
--------------------------------------------------------------------------------
   8:     else:
   9:         mid = (low + high) // 2
  10:         if target == data[mid]:
  11:             return True
- 12:         elif target < data[mid]:
+ 12:         elif target > data[mid]:
  13:             
  14:             return binary_search(data, target, low, mid - 1)
  15:         else:
  16:             
--------------------------------------------------------------------------------
[0.00000 s] killed by test_even_length_list_found (test_binary_search.TestBinarySearch)
   - [#  13] ROR binary_search: 
--------------------------------------------------------------------------------
   8:     else:
   9:         mid = (low + high) // 2
  10:         if target == data[mid]:
  11:             return True
- 12:         elif target < data[mid]:
+ 12:         elif target <= data[mid]:
  13:             
  14:             return binary_search(data, target, low, mid - 1)
  15:         else:
  16:             
--------------------------------------------------------------------------------
[0.00000 s] survived
[*] Mutation score [0.66370 s]: 91.7%
   - all: 13
   - killed: 11 (84.6%)
   - survived: 1 (7.7%)
   - incompetent: 1 (7.7%)
   - timeout: 0 (0.0%)
