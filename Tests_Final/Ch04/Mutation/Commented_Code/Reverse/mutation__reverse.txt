[*] Start mutation process:
   - targets: ch04/reverse.py
   - tests: tests_Final/ch04/test_reverse.py
[*] 7 tests passed:
   - test_reverse [0.00000 s]
[*] Start mutants generation and execution:
   - [#   1] AOR reverse: 
--------------------------------------------------------------------------------
  1: def reverse(S, start, stop):
  2:     '''Reverse elements in implicit slice S[start:stop].'''
- 3:     if start < stop - 1:
+ 3:     if start < stop + 1:
  4:         (S[start], S[stop - 1]) = (S[stop - 1], S[start])
  5:         reverse(S, start + 1, stop - 1)
--------------------------------------------------------------------------------
[0.00100 s] killed by test_empty_list (test_reverse.TestReverseFunction)
   - [#   2] AOR reverse: 
--------------------------------------------------------------------------------
  1: def reverse(S, start, stop):
  2:     '''Reverse elements in implicit slice S[start:stop].'''
  3:     if start < stop - 1:
- 4:         (S[start], S[stop - 1]) = (S[stop - 1], S[start])
+ 4:         (S[start], S[stop + 1]) = (S[stop - 1], S[start])
  5:         reverse(S, start + 1, stop - 1)
--------------------------------------------------------------------------------
[0.00100 s] killed by test_even_length_list (test_reverse.TestReverseFunction)
   - [#   3] AOR reverse: 
--------------------------------------------------------------------------------
  1: def reverse(S, start, stop):
  2:     '''Reverse elements in implicit slice S[start:stop].'''
  3:     if start < stop - 1:
- 4:         (S[start], S[stop - 1]) = (S[stop - 1], S[start])
+ 4:         (S[start], S[stop - 1]) = (S[stop + 1], S[start])
  5:         reverse(S, start + 1, stop - 1)
--------------------------------------------------------------------------------
[0.00100 s] killed by test_even_length_list (test_reverse.TestReverseFunction)
   - [#   4] AOR reverse: 
--------------------------------------------------------------------------------
  1: def reverse(S, start, stop):
  2:     '''Reverse elements in implicit slice S[start:stop].'''
  3:     if start < stop - 1:
  4:         (S[start], S[stop - 1]) = (S[stop - 1], S[start])
- 5:         reverse(S, start + 1, stop - 1)
+ 5:         reverse(S, start - 1, stop - 1)
--------------------------------------------------------------------------------
[0.00200 s] killed by test_even_length_list (test_reverse.TestReverseFunction)
   - [#   5] AOR reverse: 
--------------------------------------------------------------------------------
  1: def reverse(S, start, stop):
  2:     '''Reverse elements in implicit slice S[start:stop].'''
  3:     if start < stop - 1:
  4:         (S[start], S[stop - 1]) = (S[stop - 1], S[start])
- 5:         reverse(S, start + 1, stop - 1)
+ 5:         reverse(S, start + 1, stop + 1)
--------------------------------------------------------------------------------
[0.00100 s] killed by test_even_length_list (test_reverse.TestReverseFunction)
   - [#   6] COI reverse: 
--------------------------------------------------------------------------------
  1: def reverse(S, start, stop):
  2:     '''Reverse elements in implicit slice S[start:stop].'''
- 3:     if start < stop - 1:
+ 3:     if not (start < stop - 1):
  4:         (S[start], S[stop - 1]) = (S[stop - 1], S[start])
  5:         reverse(S, start + 1, stop - 1)
--------------------------------------------------------------------------------
[0.00100 s] killed by test_empty_list (test_reverse.TestReverseFunction)
   - [#   7] ROR reverse: 
--------------------------------------------------------------------------------
  1: def reverse(S, start, stop):
  2:     '''Reverse elements in implicit slice S[start:stop].'''
- 3:     if start < stop - 1:
+ 3:     if start > stop - 1:
  4:         (S[start], S[stop - 1]) = (S[stop - 1], S[start])
  5:         reverse(S, start + 1, stop - 1)
--------------------------------------------------------------------------------
[0.00100 s] killed by test_empty_list (test_reverse.TestReverseFunction)
   - [#   8] ROR reverse: 
--------------------------------------------------------------------------------
  1: def reverse(S, start, stop):
  2:     '''Reverse elements in implicit slice S[start:stop].'''
- 3:     if start < stop - 1:
+ 3:     if start <= stop - 1:
  4:         (S[start], S[stop - 1]) = (S[stop - 1], S[start])
  5:         reverse(S, start + 1, stop - 1)
--------------------------------------------------------------------------------
[0.00100 s] survived
[*] Mutation score [0.08600 s]: 87.5%
   - all: 8
   - killed: 7 (87.5%)
   - survived: 1 (12.5%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
