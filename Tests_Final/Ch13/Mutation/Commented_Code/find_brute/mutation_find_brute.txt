[*] Start mutation process:
   - targets: ch13/find_brute.py
   - tests: tests_Final/ch13/test_find_brute.py
[*] 11 tests passed:
   - test_find_brute [0.00000 s]
[*] Start mutants generation and execution:
   - [#   1] AOD find_brute: 
--------------------------------------------------------------------------------
   6:         while (k < m and T[i + k] == P[k]):
   7:             k += 1
   8:         if k == m:
   9:             return i
- 10:     return -1
+ 10:     return 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#   2] AOR find_brute: 
--------------------------------------------------------------------------------
   1: def find_brute(T, P):
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
-  4:     for i in range((n - m) + 1):
+  4:     for i in range((n + m) + 1):
   5:         k = 0
   6:         while (k < m and T[i + k] == P[k]):
   7:             k += 1
   8:         if k == m:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#   3] AOR find_brute: 
--------------------------------------------------------------------------------
   1: def find_brute(T, P):
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
-  4:     for i in range((n - m) + 1):
+  4:     for i in range((n - m) - 1):
   5:         k = 0
   6:         while (k < m and T[i + k] == P[k]):
   7:             k += 1
   8:         if k == m:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#   4] AOR find_brute: 
--------------------------------------------------------------------------------
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
   4:     for i in range((n - m) + 1):
   5:         k = 0
-  6:         while (k < m and T[i + k] == P[k]):
+  6:         while (k < m and T[i - k] == P[k]):
   7:             k += 1
   8:         if k == m:
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#   5] AOR find_brute: 
--------------------------------------------------------------------------------
   6:         while (k < m and T[i + k] == P[k]):
   7:             k += 1
   8:         if k == m:
   9:             return i
- 10:     return -1
+ 10:     return +1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#   6] ASR find_brute: 
--------------------------------------------------------------------------------
   3:     (n, m) = (len(T), len(P))
   4:     for i in range((n - m) + 1):
   5:         k = 0
   6:         while (k < m and T[i + k] == P[k]):
-  7:             k += 1
+  7:             k -= 1
   8:         if k == m:
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#   7] COI find_brute: 
--------------------------------------------------------------------------------
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
   4:     for i in range((n - m) + 1):
   5:         k = 0
-  6:         while (k < m and T[i + k] == P[k]):
+  6:         while not ((k < m and T[i + k] == P[k])):
   7:             k += 1
   8:         if k == m:
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[5.05362 s] timeout
   - [#   8] COI find_brute: 
--------------------------------------------------------------------------------
   4:     for i in range((n - m) + 1):
   5:         k = 0
   6:         while (k < m and T[i + k] == P[k]):
   7:             k += 1
-  8:         if k == m:
+  8:         if not (k == m):
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#   9] LCR find_brute: 
--------------------------------------------------------------------------------
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
   4:     for i in range((n - m) + 1):
   5:         k = 0
-  6:         while (k < m and T[i + k] == P[k]):
+  6:         while (k < m or T[i + k] == P[k]):
   7:             k += 1
   8:         if k == m:
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#  10] ROR find_brute: 
--------------------------------------------------------------------------------
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
   4:     for i in range((n - m) + 1):
   5:         k = 0
-  6:         while (k < m and T[i + k] == P[k]):
+  6:         while (k > m and T[i + k] == P[k]):
   7:             k += 1
   8:         if k == m:
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#  11] ROR find_brute: 
--------------------------------------------------------------------------------
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
   4:     for i in range((n - m) + 1):
   5:         k = 0
-  6:         while (k < m and T[i + k] == P[k]):
+  6:         while (k <= m and T[i + k] == P[k]):
   7:             k += 1
   8:         if k == m:
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#  12] ROR find_brute: 
--------------------------------------------------------------------------------
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
   4:     for i in range((n - m) + 1):
   5:         k = 0
-  6:         while (k < m and T[i + k] == P[k]):
+  6:         while (k < m and T[i + k] != P[k]):
   7:             k += 1
   8:         if k == m:
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
   - [#  13] ROR find_brute: 
--------------------------------------------------------------------------------
   4:     for i in range((n - m) + 1):
   5:         k = 0
   6:         while (k < m and T[i + k] == P[k]):
   7:             k += 1
-  8:         if k == m:
+  8:         if k != m:
   9:             return i
  10:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_brute.TestBruteForce)
[*] Mutation score [5.17861 s]: 100.0%
   - all: 13
   - killed: 12 (92.3%)
   - survived: 0 (0.0%)
   - incompetent: 0 (0.0%)
   - timeout: 1 (7.7%)
