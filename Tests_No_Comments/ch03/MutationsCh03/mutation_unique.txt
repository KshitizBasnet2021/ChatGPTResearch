[*] Start mutation process:
   - targets: ch03/No_Comments/unique.py
   - tests: tests_no_comments/ch03/test_unique.py
[*] 10 tests passed:
   - test_unique [0.02296 s]
[*] Start mutants generation and execution:
   - [#   1] AOR unique: 
--------------------------------------------------------------------------------
   1: def unique1(S):
   2:     for j in range(len(S)):
-  3:         for k in range(j + 1, len(S)):
+  3:         for k in range(j - 1, len(S)):
   4:             if S[j] == S[k]:
   5:                 return False
   6:     return True
   7: 
--------------------------------------------------------------------------------
[0.00000 s] killed by test_large_input (test_unique.TestUniqueFunctions)
   - [#   2] AOR unique: 
--------------------------------------------------------------------------------
   7: 
   8: def unique2(S):
   9:     temp = sorted(S)
  10:     for j in range(1, len(temp)):
- 11:         if S[j - 1] == S[j]:
+ 11:         if S[j + 1] == S[j]:
  12:             return False
  13:     return True
--------------------------------------------------------------------------------
[0.02748 s] killed by test_large_input (test_unique.TestUniqueFunctions)
   - [#   3] COI unique: 
--------------------------------------------------------------------------------
   1: def unique1(S):
   2:     for j in range(len(S)):
   3:         for k in range(j + 1, len(S)):
-  4:             if S[j] == S[k]:
+  4:             if not (S[j] == S[k]):
   5:                 return False
   6:     return True
   7: 
   8: def unique2(S):
--------------------------------------------------------------------------------
[0.02404 s] killed by test_large_duplicate_input (test_unique.TestUniqueFunctions)
   - [#   4] COI unique: 
--------------------------------------------------------------------------------
   7: 
   8: def unique2(S):
   9:     temp = sorted(S)
  10:     for j in range(1, len(temp)):
- 11:         if S[j - 1] == S[j]:
+ 11:         if not (S[j - 1] == S[j]):
  12:             return False
  13:     return True
--------------------------------------------------------------------------------
[0.00000 s] killed by test_large_duplicate_input (test_unique.TestUniqueFunctions)
   - [#   5] ROR unique: 
--------------------------------------------------------------------------------
   1: def unique1(S):
   2:     for j in range(len(S)):
   3:         for k in range(j + 1, len(S)):
-  4:             if S[j] == S[k]:
+  4:             if S[j] != S[k]:
   5:                 return False
   6:     return True
   7: 
   8: def unique2(S):
--------------------------------------------------------------------------------
[0.02623 s] killed by test_large_duplicate_input (test_unique.TestUniqueFunctions)
   - [#   6] ROR unique: 
--------------------------------------------------------------------------------
   7: 
   8: def unique2(S):
   9:     temp = sorted(S)
  10:     for j in range(1, len(temp)):
- 11:         if S[j - 1] == S[j]:
+ 11:         if S[j - 1] != S[j]:
  12:             return False
  13:     return True
--------------------------------------------------------------------------------
[0.00100 s] killed by test_large_duplicate_input (test_unique.TestUniqueFunctions)
[*] Mutation score [0.17378 s]: 100.0%
   - all: 6
   - killed: 6 (100.0%)
   - survived: 0 (0.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
