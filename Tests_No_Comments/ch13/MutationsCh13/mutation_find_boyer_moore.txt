[*] Start mutation process:
   - targets: ch13/No_Comments/find_boyer_moore.py
   - tests: tests_no_comments/ch13/test_find_boyer_moore.py
[*] 11 tests passed:
   - test_find_boyer_moore [0.00100 s]
[*] Start mutants generation and execution:
   - [#   1] AOD find_boyer_moore: 
--------------------------------------------------------------------------------
  13:                 return i
  14:             else:i -= 1
  15:                 k -= 1
  16:         else:
- 17:             j = last.get(T[i], -1)
+ 17:             j = last.get(T[i], 1)
  18:             i += m - min(k, j + 1)
  19:             k = m - 1
  20:     return -1
--------------------------------------------------------------------------------
[0.00251 s] survived
   - [#   2] AOD find_boyer_moore: 
--------------------------------------------------------------------------------
  16:         else:
  17:             j = last.get(T[i], -1)
  18:             i += m - min(k, j + 1)
  19:             k = m - 1
- 20:     return -1
+ 20:     return 1
--------------------------------------------------------------------------------
[0.00165 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#   3] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
   4:         return 0
   5:     last = {}
   6:     for k in range(m):
   7:         last[P[k]] = k
-  8:     i = m - 1
+  8:     i = m + 1
   9:     k = m - 1
  10:     while i < n:
  11:         if T[i] == P[k]:
  12:             if k == 0:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_exact_match (test_find_boyer_moore.TestBoyerMoore)
   - [#   4] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
   5:     last = {}
   6:     for k in range(m):
   7:         last[P[k]] = k
   8:     i = m - 1
-  9:     k = m - 1
+  9:     k = m + 1
  10:     while i < n:
  11:         if T[i] == P[k]:
  12:             if k == 0:
  13:                 return i
--------------------------------------------------------------------------------
[0.00095 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#   5] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  13:                 return i
  14:             else:i -= 1
  15:                 k -= 1
  16:         else:
- 17:             j = last.get(T[i], -1)
+ 17:             j = last.get(T[i], +1)
  18:             i += m - min(k, j + 1)
  19:             k = m - 1
  20:     return -1
--------------------------------------------------------------------------------
[0.00097 s] survived
   - [#   6] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  14:             else:i -= 1
  15:                 k -= 1
  16:         else:
  17:             j = last.get(T[i], -1)
- 18:             i += m - min(k, j + 1)
+ 18:             i += m + min(k, j + 1)
  19:             k = m - 1
  20:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#   7] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  14:             else:i -= 1
  15:                 k -= 1
  16:         else:
  17:             j = last.get(T[i], -1)
- 18:             i += m - min(k, j + 1)
+ 18:             i += m - min(k, j - 1)
  19:             k = m - 1
  20:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#   8] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  15:                 k -= 1
  16:         else:
  17:             j = last.get(T[i], -1)
  18:             i += m - min(k, j + 1)
- 19:             k = m - 1
+ 19:             k = m + 1
  20:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#   9] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  16:         else:
  17:             j = last.get(T[i], -1)
  18:             i += m - min(k, j + 1)
  19:             k = m - 1
- 20:     return -1
+ 20:     return +1
--------------------------------------------------------------------------------
[0.00097 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  10] ASR find_boyer_moore: 
--------------------------------------------------------------------------------
  10:     while i < n:
  11:         if T[i] == P[k]:
  12:             if k == 0:
  13:                 return i
- 14:             else:i -= 1
+ 14:             else:i += 1
  15:                 k -= 1
  16:         else:
  17:             j = last.get(T[i], -1)
  18:             i += m - min(k, j + 1)
--------------------------------------------------------------------------------
[0.00100 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  11] ASR find_boyer_moore: 
--------------------------------------------------------------------------------
  11:         if T[i] == P[k]:
  12:             if k == 0:
  13:                 return i
  14:             else:i -= 1
- 15:                 k -= 1
+ 15:                 k += 1
  16:         else:
  17:             j = last.get(T[i], -1)
  18:             i += m - min(k, j + 1)
  19:             k = m - 1
--------------------------------------------------------------------------------
[0.00097 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  12] ASR find_boyer_moore: 
--------------------------------------------------------------------------------
  14:             else:i -= 1
  15:                 k -= 1
  16:         else:
  17:             j = last.get(T[i], -1)
- 18:             i += m - min(k, j + 1)
+ 18:             i -= m - min(k, j + 1)
  19:             k = m - 1
  20:     return -1
--------------------------------------------------------------------------------
[0.00028 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  13] COI find_boyer_moore: 
--------------------------------------------------------------------------------
   1: def find_boyer_moore(T, P):
   2:     (n, m) = (len(T), len(P))
-  3:     if m == 0:
+  3:     if not (m == 0):
   4:         return 0
   5:     last = {}
   6:     for k in range(m):
   7:         last[P[k]] = k
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  14] COI find_boyer_moore: 
--------------------------------------------------------------------------------
   6:     for k in range(m):
   7:         last[P[k]] = k
   8:     i = m - 1
   9:     k = m - 1
- 10:     while i < n:
+ 10:     while not (i < n):
  11:         if T[i] == P[k]:
  12:             if k == 0:
  13:                 return i
  14:             else:i -= 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  15] COI find_boyer_moore: 
--------------------------------------------------------------------------------
   7:         last[P[k]] = k
   8:     i = m - 1
   9:     k = m - 1
  10:     while i < n:
- 11:         if T[i] == P[k]:
+ 11:         if not (T[i] == P[k]):
  12:             if k == 0:
  13:                 return i
  14:             else:i -= 1
  15:                 k -= 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  16] COI find_boyer_moore: 
--------------------------------------------------------------------------------
   8:     i = m - 1
   9:     k = m - 1
  10:     while i < n:
  11:         if T[i] == P[k]:
- 12:             if k == 0:
+ 12:             if not (k == 0):
  13:                 return i
  14:             else:i -= 1
  15:                 k -= 1
  16:         else:
--------------------------------------------------------------------------------
[0.00095 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  17] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   1: def find_boyer_moore(T, P):
   2:     (n, m) = (len(T), len(P))
-  3:     if m == 0:
+  3:     if m != 0:
   4:         return 0
   5:     last = {}
   6:     for k in range(m):
   7:         last[P[k]] = k
--------------------------------------------------------------------------------
[0.00098 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  18] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   6:     for k in range(m):
   7:         last[P[k]] = k
   8:     i = m - 1
   9:     k = m - 1
- 10:     while i < n:
+ 10:     while i > n:
  11:         if T[i] == P[k]:
  12:             if k == 0:
  13:                 return i
  14:             else:i -= 1
--------------------------------------------------------------------------------
[0.00143 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  19] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   6:     for k in range(m):
   7:         last[P[k]] = k
   8:     i = m - 1
   9:     k = m - 1
- 10:     while i < n:
+ 10:     while i <= n:
  11:         if T[i] == P[k]:
  12:             if k == 0:
  13:                 return i
  14:             else:i -= 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_long_pattern (test_find_boyer_moore.TestBoyerMoore)
   - [#  20] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   7:         last[P[k]] = k
   8:     i = m - 1
   9:     k = m - 1
  10:     while i < n:
- 11:         if T[i] == P[k]:
+ 11:         if T[i] != P[k]:
  12:             if k == 0:
  13:                 return i
  14:             else:i -= 1
  15:                 k -= 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
   - [#  21] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   8:     i = m - 1
   9:     k = m - 1
  10:     while i < n:
  11:         if T[i] == P[k]:
- 12:             if k == 0:
+ 12:             if k != 0:
  13:                 return i
  14:             else:i -= 1
  15:                 k -= 1
  16:         else:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_case_sensitivity (test_find_boyer_moore.TestBoyerMoore)
[*] Mutation score [0.24636 s]: 90.5%
   - all: 21
   - killed: 19 (90.5%)
   - survived: 2 (9.5%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
