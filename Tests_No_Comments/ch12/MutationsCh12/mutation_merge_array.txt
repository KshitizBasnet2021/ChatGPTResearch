[*] Start mutation process:
   - targets: ch12/merge_array.py
   - tests: tests/ch12/test_merge_array.py
[*] 7 tests passed:
   - test_merge_array [0.02237 s]
[*] Start mutants generation and execution:
   - [#   1] AOR merge_array: 
--------------------------------------------------------------------------------
  21: 
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
- 25:     while i + j < len(S):
+ 25:     while i - j < len(S):
  26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
--------------------------------------------------------------------------------
[0.00862 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#   2] AOR merge_array: 
--------------------------------------------------------------------------------
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
  26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
- 27:             S[i + j] = S1[i]
+ 27:             S[i - j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
  31:             j += 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#   3] AOR merge_array: 
--------------------------------------------------------------------------------
  26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
- 30:             S[i + j] = S2[j]
+ 30:             S[i - j] = S2[j]
  31:             j += 1
  32: 
  33: def merge_sort(S):
  34:     '''Sort the elements of Python list S using the merge-sort algorithm.'''
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#   4] AOR merge_array: 
--------------------------------------------------------------------------------
  35:     n = len(S)
  36:     if n < 2:
  37:         return
  38:     
- 39:     mid = n // 2
+ 39:     mid = n / 2
  40:     S1 = S[0:mid]
  41:     S2 = S[mid:n]
  42:     
  43:     merge_sort(S1)
--------------------------------------------------------------------------------
[0.00000 s] incompetent
   - [#   5] AOR merge_array: 
--------------------------------------------------------------------------------
  35:     n = len(S)
  36:     if n < 2:
  37:         return
  38:     
- 39:     mid = n // 2
+ 39:     mid = n * 2
  40:     S1 = S[0:mid]
  41:     S2 = S[mid:n]
  42:     
  43:     merge_sort(S1)
--------------------------------------------------------------------------------
[0.14997 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#   6] ASR merge_array: 
--------------------------------------------------------------------------------
  24:     i = j = 0
  25:     while i + j < len(S):
  26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
- 28:             i += 1
+ 28:             i -= 1
  29:         else:
  30:             S[i + j] = S2[j]
  31:             j += 1
  32: 
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#   7] ASR merge_array: 
--------------------------------------------------------------------------------
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
- 31:             j += 1
+ 31:             j -= 1
  32: 
  33: def merge_sort(S):
  34:     '''Sort the elements of Python list S using the merge-sort algorithm.'''
  35:     n = len(S)
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#   8] COI merge_array: 
--------------------------------------------------------------------------------
  21: 
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
- 25:     while i + j < len(S):
+ 25:     while not (i + j < len(S)):
  26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
--------------------------------------------------------------------------------
[0.00458 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#   9] COI merge_array: 
--------------------------------------------------------------------------------
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
- 26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
+ 26:         if not ((j == len(S2) or (i < len(S1) and S1[i] < S2[j]))):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
--------------------------------------------------------------------------------
[0.00512 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  10] COI merge_array: 
--------------------------------------------------------------------------------
  32: 
  33: def merge_sort(S):
  34:     '''Sort the elements of Python list S using the merge-sort algorithm.'''
  35:     n = len(S)
- 36:     if n < 2:
+ 36:     if not (n < 2):
  37:         return
  38:     
  39:     mid = n // 2
  40:     S1 = S[0:mid]
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  11] LCR merge_array: 
--------------------------------------------------------------------------------
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
- 26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
+ 26:         if (j == len(S2) and (i < len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  12] LCR merge_array: 
--------------------------------------------------------------------------------
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
- 26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
+ 26:         if (j == len(S2) or (i < len(S1) or S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
--------------------------------------------------------------------------------
[0.00008 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  13] ROR merge_array: 
--------------------------------------------------------------------------------
  21: 
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
- 25:     while i + j < len(S):
+ 25:     while i + j > len(S):
  26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  14] ROR merge_array: 
--------------------------------------------------------------------------------
  21: 
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
- 25:     while i + j < len(S):
+ 25:     while i + j <= len(S):
  26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  15] ROR merge_array: 
--------------------------------------------------------------------------------
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
- 26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
+ 26:         if (j != len(S2) or (i < len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  16] ROR merge_array: 
--------------------------------------------------------------------------------
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
- 26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
+ 26:         if (j == len(S2) or (i > len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  17] ROR merge_array: 
--------------------------------------------------------------------------------
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
- 26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
+ 26:         if (j == len(S2) or (i <= len(S1) and S1[i] < S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  18] ROR merge_array: 
--------------------------------------------------------------------------------
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
- 26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
+ 26:         if (j == len(S2) or (i < len(S1) and S1[i] > S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
--------------------------------------------------------------------------------
[0.00509 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  19] ROR merge_array: 
--------------------------------------------------------------------------------
  22: def merge(S1, S2, S):
  23:     '''Merge two sorted Python lists S1 and S2 into properly sized list S.'''
  24:     i = j = 0
  25:     while i + j < len(S):
- 26:         if (j == len(S2) or (i < len(S1) and S1[i] < S2[j])):
+ 26:         if (j == len(S2) or (i < len(S1) and S1[i] <= S2[j])):
  27:             S[i + j] = S1[i]
  28:             i += 1
  29:         else:
  30:             S[i + j] = S2[j]
--------------------------------------------------------------------------------
[0.02430 s] survived
   - [#  20] ROR merge_array: 
--------------------------------------------------------------------------------
  32: 
  33: def merge_sort(S):
  34:     '''Sort the elements of Python list S using the merge-sort algorithm.'''
  35:     n = len(S)
- 36:     if n < 2:
+ 36:     if n > 2:
  37:         return
  38:     
  39:     mid = n // 2
  40:     S1 = S[0:mid]
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  21] ROR merge_array: 
--------------------------------------------------------------------------------
  32: 
  33: def merge_sort(S):
  34:     '''Sort the elements of Python list S using the merge-sort algorithm.'''
  35:     n = len(S)
- 36:     if n < 2:
+ 36:     if n <= 2:
  37:         return
  38:     
  39:     mid = n // 2
  40:     S1 = S[0:mid]
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  22] SIR merge_array: 
--------------------------------------------------------------------------------
  36:     if n < 2:
  37:         return
  38:     
  39:     mid = n // 2
- 40:     S1 = S[0:mid]
+ 40:     S1 = S[:mid]
  41:     S2 = S[mid:n]
  42:     
  43:     merge_sort(S1)
  44:     merge_sort(S2)
--------------------------------------------------------------------------------
[0.02845 s] survived
   - [#  23] SIR merge_array: 
--------------------------------------------------------------------------------
  36:     if n < 2:
  37:         return
  38:     
  39:     mid = n // 2
- 40:     S1 = S[0:mid]
+ 40:     S1 = S[0:]
  41:     S2 = S[mid:n]
  42:     
  43:     merge_sort(S1)
  44:     merge_sort(S2)
--------------------------------------------------------------------------------
[0.15032 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  24] SIR merge_array: 
--------------------------------------------------------------------------------
  37:         return
  38:     
  39:     mid = n // 2
  40:     S1 = S[0:mid]
- 41:     S2 = S[mid:n]
+ 41:     S2 = S[:n]
  42:     
  43:     merge_sort(S1)
  44:     merge_sort(S2)
  45:     
--------------------------------------------------------------------------------
[0.15254 s] killed by test_duplicate_elements (test_merge_array.TestMergeSort)
   - [#  25] SIR merge_array: 
--------------------------------------------------------------------------------
  37:         return
  38:     
  39:     mid = n // 2
  40:     S1 = S[0:mid]
- 41:     S2 = S[mid:n]
+ 41:     S2 = S[mid:]
  42:     
  43:     merge_sort(S1)
  44:     merge_sort(S2)
  45:     
--------------------------------------------------------------------------------
[0.02436 s] survived
[*] Mutation score [0.84442 s]: 87.5%
   - all: 25
   - killed: 21 (84.0%)
   - survived: 3 (12.0%)
   - incompetent: 1 (4.0%)
   - timeout: 0 (0.0%)
