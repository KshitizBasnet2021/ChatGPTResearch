[*] Start mutation process:
   - targets: ch05/No_Comments/insertion_sort.py
   - tests: tests_no_comments/ch05/test_insertion_sort.py
[*] 8 tests passed:
   - test_insertion_sort [0.00100 s]
[*] Start mutants generation and execution:
   - [#   1] AOR insertion_sort: 
--------------------------------------------------------------------------------
  1: def insertion_sort(A):
  2:     for k in range(1, len(A)):
  3:         cur = A[k]
  4:         j = k
- 5:         while (j > 0 and A[j - 1] > cur):
+ 5:         while (j > 0 and A[j + 1] > cur):
  6:             A[j] = A[j - 1]
  7:             j -= 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00655 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   2] AOR insertion_sort: 
--------------------------------------------------------------------------------
  2:     for k in range(1, len(A)):
  3:         cur = A[k]
  4:         j = k
  5:         while (j > 0 and A[j - 1] > cur):
- 6:             A[j] = A[j - 1]
+ 6:             A[j] = A[j + 1]
  7:             j -= 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   3] ASR insertion_sort: 
--------------------------------------------------------------------------------
  3:         cur = A[k]
  4:         j = k
  5:         while (j > 0 and A[j - 1] > cur):
  6:             A[j] = A[j - 1]
- 7:             j -= 1
+ 7:             j += 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00102 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   4] COI insertion_sort: 
--------------------------------------------------------------------------------
  1: def insertion_sort(A):
  2:     for k in range(1, len(A)):
  3:         cur = A[k]
  4:         j = k
- 5:         while (j > 0 and A[j - 1] > cur):
+ 5:         while not ((j > 0 and A[j - 1] > cur)):
  6:             A[j] = A[j - 1]
  7:             j -= 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00100 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   5] LCR insertion_sort: 
--------------------------------------------------------------------------------
  1: def insertion_sort(A):
  2:     for k in range(1, len(A)):
  3:         cur = A[k]
  4:         j = k
- 5:         while (j > 0 and A[j - 1] > cur):
+ 5:         while (j > 0 or A[j - 1] > cur):
  6:             A[j] = A[j - 1]
  7:             j -= 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   6] ROR insertion_sort: 
--------------------------------------------------------------------------------
  1: def insertion_sort(A):
  2:     for k in range(1, len(A)):
  3:         cur = A[k]
  4:         j = k
- 5:         while (j > 0 and A[j - 1] > cur):
+ 5:         while (j < 0 and A[j - 1] > cur):
  6:             A[j] = A[j - 1]
  7:             j -= 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00096 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   7] ROR insertion_sort: 
--------------------------------------------------------------------------------
  1: def insertion_sort(A):
  2:     for k in range(1, len(A)):
  3:         cur = A[k]
  4:         j = k
- 5:         while (j > 0 and A[j - 1] > cur):
+ 5:         while (j >= 0 and A[j - 1] > cur):
  6:             A[j] = A[j - 1]
  7:             j -= 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00100 s] killed by test_mixed_list (test_insertion_sort.TestInsertionSort)
   - [#   8] ROR insertion_sort: 
--------------------------------------------------------------------------------
  1: def insertion_sort(A):
  2:     for k in range(1, len(A)):
  3:         cur = A[k]
  4:         j = k
- 5:         while (j > 0 and A[j - 1] > cur):
+ 5:         while (j > 0 and A[j - 1] < cur):
  6:             A[j] = A[j - 1]
  7:             j -= 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00100 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   9] ROR insertion_sort: 
--------------------------------------------------------------------------------
  1: def insertion_sort(A):
  2:     for k in range(1, len(A)):
  3:         cur = A[k]
  4:         j = k
- 5:         while (j > 0 and A[j - 1] > cur):
+ 5:         while (j > 0 and A[j - 1] >= cur):
  6:             A[j] = A[j - 1]
  7:             j -= 1
  8:         A[j] = cur
--------------------------------------------------------------------------------
[0.00100 s] survived
[*] Mutation score [0.09753 s]: 88.9%
   - all: 9
   - killed: 8 (88.9%)
   - survived: 1 (11.1%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
