[*] Start mutation process:
   - targets: ch13/find_boyer_moore.py
   - tests: tests/ch13/test_find_boyer_moore.py
[*] 7 tests passed:
   - test_find_boyer_moore [0.18990 s]
[*] Start mutants generation and execution:
   - [#   1] AOD find_boyer_moore: 
--------------------------------------------------------------------------------
  15:             else:
  16:                 i -= 1
  17:                 k -= 1
  18:         else:
- 19:             j = last.get(T[i], -1)
+ 19:             j = last.get(T[i], 1)
  20:             i += m - min(k, j + 1)
  21:             k = m - 1
  22:     return -1
--------------------------------------------------------------------------------
[0.42199 s] survived
   - [#   2] AOD find_boyer_moore: 
--------------------------------------------------------------------------------
  18:         else:
  19:             j = last.get(T[i], -1)
  20:             i += m - min(k, j + 1)
  21:             k = m - 1
- 22:     return -1
+ 22:     return 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#   3] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
   5:         return 0
   6:     last = {}
   7:     for k in range(m):
   8:         last[P[k]] = k
-  9:     i = m - 1
+  9:     i = m + 1
  10:     k = m - 1
  11:     while i < n:
  12:         if T[i] == P[k]:
  13:             if k == 0:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#   4] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
   6:     last = {}
   7:     for k in range(m):
   8:         last[P[k]] = k
   9:     i = m - 1
- 10:     k = m - 1
+ 10:     k = m + 1
  11:     while i < n:
  12:         if T[i] == P[k]:
  13:             if k == 0:
  14:                 return i
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#   5] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  15:             else:
  16:                 i -= 1
  17:                 k -= 1
  18:         else:
- 19:             j = last.get(T[i], -1)
+ 19:             j = last.get(T[i], +1)
  20:             i += m - min(k, j + 1)
  21:             k = m - 1
  22:     return -1
--------------------------------------------------------------------------------
[0.41716 s] survived
   - [#   6] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  16:                 i -= 1
  17:                 k -= 1
  18:         else:
  19:             j = last.get(T[i], -1)
- 20:             i += m - min(k, j + 1)
+ 20:             i += m + min(k, j + 1)
  21:             k = m - 1
  22:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#   7] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  16:                 i -= 1
  17:                 k -= 1
  18:         else:
  19:             j = last.get(T[i], -1)
- 20:             i += m - min(k, j + 1)
+ 20:             i += m - min(k, j - 1)
  21:             k = m - 1
  22:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#   8] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  17:                 k -= 1
  18:         else:
  19:             j = last.get(T[i], -1)
  20:             i += m - min(k, j + 1)
- 21:             k = m - 1
+ 21:             k = m + 1
  22:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#   9] AOR find_boyer_moore: 
--------------------------------------------------------------------------------
  18:         else:
  19:             j = last.get(T[i], -1)
  20:             i += m - min(k, j + 1)
  21:             k = m - 1
- 22:     return -1
+ 22:     return +1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  10] ASR find_boyer_moore: 
--------------------------------------------------------------------------------
  12:         if T[i] == P[k]:
  13:             if k == 0:
  14:                 return i
  15:             else:
- 16:                 i -= 1
+ 16:                 i += 1
  17:                 k -= 1
  18:         else:
  19:             j = last.get(T[i], -1)
  20:             i += m - min(k, j + 1)
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  11] ASR find_boyer_moore: 
--------------------------------------------------------------------------------
  13:             if k == 0:
  14:                 return i
  15:             else:
  16:                 i -= 1
- 17:                 k -= 1
+ 17:                 k += 1
  18:         else:
  19:             j = last.get(T[i], -1)
  20:             i += m - min(k, j + 1)
  21:             k = m - 1
--------------------------------------------------------------------------------
[0.00201 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  12] ASR find_boyer_moore: 
--------------------------------------------------------------------------------
  16:                 i -= 1
  17:                 k -= 1
  18:         else:
  19:             j = last.get(T[i], -1)
- 20:             i += m - min(k, j + 1)
+ 20:             i -= m - min(k, j + 1)
  21:             k = m - 1
  22:     return -1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  13] COI find_boyer_moore: 
--------------------------------------------------------------------------------
   1: def find_boyer_moore(T, P):
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
-  4:     if m == 0:
+  4:     if not (m == 0):
   5:         return 0
   6:     last = {}
   7:     for k in range(m):
   8:         last[P[k]] = k
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  14] COI find_boyer_moore: 
--------------------------------------------------------------------------------
   7:     for k in range(m):
   8:         last[P[k]] = k
   9:     i = m - 1
  10:     k = m - 1
- 11:     while i < n:
+ 11:     while not (i < n):
  12:         if T[i] == P[k]:
  13:             if k == 0:
  14:                 return i
  15:             else:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  15] COI find_boyer_moore: 
--------------------------------------------------------------------------------
   8:         last[P[k]] = k
   9:     i = m - 1
  10:     k = m - 1
  11:     while i < n:
- 12:         if T[i] == P[k]:
+ 12:         if not (T[i] == P[k]):
  13:             if k == 0:
  14:                 return i
  15:             else:
  16:                 i -= 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  16] COI find_boyer_moore: 
--------------------------------------------------------------------------------
   9:     i = m - 1
  10:     k = m - 1
  11:     while i < n:
  12:         if T[i] == P[k]:
- 13:             if k == 0:
+ 13:             if not (k == 0):
  14:                 return i
  15:             else:
  16:                 i -= 1
  17:                 k -= 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  17] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   1: def find_boyer_moore(T, P):
   2:     '''Return the lowest index of T at which substring P begins (or else -1).'''
   3:     (n, m) = (len(T), len(P))
-  4:     if m == 0:
+  4:     if m != 0:
   5:         return 0
   6:     last = {}
   7:     for k in range(m):
   8:         last[P[k]] = k
--------------------------------------------------------------------------------
[0.00510 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  18] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   7:     for k in range(m):
   8:         last[P[k]] = k
   9:     i = m - 1
  10:     k = m - 1
- 11:     while i < n:
+ 11:     while i > n:
  12:         if T[i] == P[k]:
  13:             if k == 0:
  14:                 return i
  15:             else:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  19] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   7:     for k in range(m):
   8:         last[P[k]] = k
   9:     i = m - 1
  10:     k = m - 1
- 11:     while i < n:
+ 11:     while i <= n:
  12:         if T[i] == P[k]:
  13:             if k == 0:
  14:                 return i
  15:             else:
--------------------------------------------------------------------------------
[0.18002 s] killed by test_find_boyer_moore_single_char (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  20] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   8:         last[P[k]] = k
   9:     i = m - 1
  10:     k = m - 1
  11:     while i < n:
- 12:         if T[i] == P[k]:
+ 12:         if T[i] != P[k]:
  13:             if k == 0:
  14:                 return i
  15:             else:
  16:                 i -= 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
   - [#  21] ROR find_boyer_moore: 
--------------------------------------------------------------------------------
   9:     i = m - 1
  10:     k = m - 1
  11:     while i < n:
  12:         if T[i] == P[k]:
- 13:             if k == 0:
+ 13:             if k != 0:
  14:                 return i
  15:             else:
  16:                 i -= 1
  17:                 k -= 1
--------------------------------------------------------------------------------
[0.00000 s] killed by test_find_boyer_moore_basic (test_find_boyer_moore.TestFindBoyerMoore)
[*] Mutation score [1.44997 s]: 90.5%
   - all: 21
   - killed: 19 (90.5%)
   - survived: 2 (9.5%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
