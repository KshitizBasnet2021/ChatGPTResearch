[*] Start mutation process:
   - targets: ch05/insertion_sort.py
   - tests: tests/ch05/test_insertion_sort.py
[*] 7 tests passed:
   - test_insertion_sort [6.02063 s]
[*] Start mutants generation and execution:
   - [#   1] AOR insertion_sort: 
--------------------------------------------------------------------------------
  23:     '''Sort list of comparable elements into nondecreasing order.'''
  24:     for k in range(1, len(A)):
  25:         cur = A[k]
  26:         j = k
- 27:         while (j > 0 and A[j - 1] > cur):
+ 27:         while (j > 0 and A[j + 1] > cur):
  28:             A[j] = A[j - 1]
  29:             j -= 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[0.00575 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   2] AOR insertion_sort: 
--------------------------------------------------------------------------------
  24:     for k in range(1, len(A)):
  25:         cur = A[k]
  26:         j = k
  27:         while (j > 0 and A[j - 1] > cur):
- 28:             A[j] = A[j - 1]
+ 28:             A[j] = A[j + 1]
  29:             j -= 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   3] ASR insertion_sort: 
--------------------------------------------------------------------------------
  25:         cur = A[k]
  26:         j = k
  27:         while (j > 0 and A[j - 1] > cur):
  28:             A[j] = A[j - 1]
- 29:             j -= 1
+ 29:             j += 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   4] COI insertion_sort: 
--------------------------------------------------------------------------------
  23:     '''Sort list of comparable elements into nondecreasing order.'''
  24:     for k in range(1, len(A)):
  25:         cur = A[k]
  26:         j = k
- 27:         while (j > 0 and A[j - 1] > cur):
+ 27:         while not ((j > 0 and A[j - 1] > cur)):
  28:             A[j] = A[j - 1]
  29:             j -= 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   5] LCR insertion_sort: 
--------------------------------------------------------------------------------
  23:     '''Sort list of comparable elements into nondecreasing order.'''
  24:     for k in range(1, len(A)):
  25:         cur = A[k]
  26:         j = k
- 27:         while (j > 0 and A[j - 1] > cur):
+ 27:         while (j > 0 or A[j - 1] > cur):
  28:             A[j] = A[j - 1]
  29:             j -= 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   6] ROR insertion_sort: 
--------------------------------------------------------------------------------
  23:     '''Sort list of comparable elements into nondecreasing order.'''
  24:     for k in range(1, len(A)):
  25:         cur = A[k]
  26:         j = k
- 27:         while (j > 0 and A[j - 1] > cur):
+ 27:         while (j < 0 and A[j - 1] > cur):
  28:             A[j] = A[j - 1]
  29:             j -= 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   7] ROR insertion_sort: 
--------------------------------------------------------------------------------
  23:     '''Sort list of comparable elements into nondecreasing order.'''
  24:     for k in range(1, len(A)):
  25:         cur = A[k]
  26:         j = k
- 27:         while (j > 0 and A[j - 1] > cur):
+ 27:         while (j >= 0 and A[j - 1] > cur):
  28:             A[j] = A[j - 1]
  29:             j -= 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[0.00982 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   8] ROR insertion_sort: 
--------------------------------------------------------------------------------
  23:     '''Sort list of comparable elements into nondecreasing order.'''
  24:     for k in range(1, len(A)):
  25:         cur = A[k]
  26:         j = k
- 27:         while (j > 0 and A[j - 1] > cur):
+ 27:         while (j > 0 and A[j - 1] < cur):
  28:             A[j] = A[j - 1]
  29:             j -= 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[0.00000 s] killed by test_duplicate_elements (test_insertion_sort.TestInsertionSort)
   - [#   9] ROR insertion_sort: 
--------------------------------------------------------------------------------
  23:     '''Sort list of comparable elements into nondecreasing order.'''
  24:     for k in range(1, len(A)):
  25:         cur = A[k]
  26:         j = k
- 27:         while (j > 0 and A[j - 1] > cur):
+ 27:         while (j > 0 and A[j - 1] >= cur):
  28:             A[j] = A[j - 1]
  29:             j -= 1
  30:         A[j] = cur
--------------------------------------------------------------------------------
[*] Mutation score [12.31701 s]: 100.0%
   - all: 8
   - killed: 8 (100.0%)
   - survived: 0 (0.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
