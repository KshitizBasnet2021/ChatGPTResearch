[*] Start mutation process:
   - targets: ch04/binary_search.py
   - tests: tests/ch04/test_binary_search.py
[*] 7 tests passed:
   - test_binary_search [0.00000 s]
[*] Start mutants generation and execution:
   - [#   1] AOR binary_search: 
--------------------------------------------------------------------------------
  26:   '''
  27:     if low > high:
  28:         return False
  29:     else:
- 30:         mid = (low + high) // 2
+ 30:         mid = (low - high) // 2
  31:         if target == data[mid]:
  32:             return True
  33:         elif target < data[mid]:
  34:             
--------------------------------------------------------------------------------
[0.00201 s] killed by test_element_found (test_binary_search.TestBinarySearch)
   - [#   2] AOR binary_search: 
--------------------------------------------------------------------------------
  26:   '''
  27:     if low > high:
  28:         return False
  29:     else:
- 30:         mid = (low + high) // 2
+ 30:         mid = (low + high) / 2
  31:         if target == data[mid]:
  32:             return True
  33:         elif target < data[mid]:
  34:             
--------------------------------------------------------------------------------
[0.00000 s] incompetent
   - [#   3] AOR binary_search: 
--------------------------------------------------------------------------------
  26:   '''
  27:     if low > high:
  28:         return False
  29:     else:
- 30:         mid = (low + high) // 2
+ 30:         mid = (low + high) * 2
  31:         if target == data[mid]:
  32:             return True
  33:         elif target < data[mid]:
  34:             
--------------------------------------------------------------------------------
[0.00000 s] killed by test_element_found (test_binary_search.TestBinarySearch)
   - [#   4] AOR binary_search: 
--------------------------------------------------------------------------------
  31:         if target == data[mid]:
  32:             return True
  33:         elif target < data[mid]:
  34:             
- 35:             return binary_search(data, target, low, mid - 1)
+ 35:             return binary_search(data, target, low, mid + 1)
  36:         else:
  37:             
  38:             return binary_search(data, target, mid + 1, high)
--------------------------------------------------------------------------------
[0.15021 s] killed by test_element_not_found (test_binary_search.TestBinarySearch)
   - [#   5] AOR binary_search: 
--------------------------------------------------------------------------------
  34:             
  35:             return binary_search(data, target, low, mid - 1)
  36:         else:
  37:             
- 38:             return binary_search(data, target, mid + 1, high)
+ 38:             return binary_search(data, target, mid - 1, high)
--------------------------------------------------------------------------------
[0.14743 s] killed by test_element_not_found (test_binary_search.TestBinarySearch)
   - [#   6] COI binary_search: 
--------------------------------------------------------------------------------
  23:     '''Return True if target is found in indicated portion of a Python list.
  24: 
  25:   The search only considers the portion from data[low] to data[high] inclusive.
  26:   '''
- 27:     if low > high:
+ 27:     if not (low > high):
  28:         return False
  29:     else:
  30:         mid = (low + high) // 2
  31:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_element_found (test_binary_search.TestBinarySearch)
   - [#   7] COI binary_search: 
--------------------------------------------------------------------------------
  27:     if low > high:
  28:         return False
  29:     else:
  30:         mid = (low + high) // 2
- 31:         if target == data[mid]:
+ 31:         if not (target == data[mid]):
  32:             return True
  33:         elif target < data[mid]:
  34:             
  35:             return binary_search(data, target, low, mid - 1)
--------------------------------------------------------------------------------
[0.00157 s] killed by test_element_not_found (test_binary_search.TestBinarySearch)
   - [#   8] COI binary_search: 
--------------------------------------------------------------------------------
  29:     else:
  30:         mid = (low + high) // 2
  31:         if target == data[mid]:
  32:             return True
- 33:         elif target < data[mid]:
+ 33:         elif not (target < data[mid]):
  34:             
  35:             return binary_search(data, target, low, mid - 1)
  36:         else:
  37:             
--------------------------------------------------------------------------------
[0.00000 s] killed by test_large_input_element_found (test_binary_search.TestBinarySearch)
   - [#   9] ROR binary_search: 
--------------------------------------------------------------------------------
  23:     '''Return True if target is found in indicated portion of a Python list.
  24: 
  25:   The search only considers the portion from data[low] to data[high] inclusive.
  26:   '''
- 27:     if low > high:
+ 27:     if low < high:
  28:         return False
  29:     else:
  30:         mid = (low + high) // 2
  31:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_element_found (test_binary_search.TestBinarySearch)
   - [#  10] ROR binary_search: 
--------------------------------------------------------------------------------
  23:     '''Return True if target is found in indicated portion of a Python list.
  24: 
  25:   The search only considers the portion from data[low] to data[high] inclusive.
  26:   '''
- 27:     if low > high:
+ 27:     if low >= high:
  28:         return False
  29:     else:
  30:         mid = (low + high) // 2
  31:         if target == data[mid]:
--------------------------------------------------------------------------------
[0.00000 s] killed by test_single_element_list_found (test_binary_search.TestBinarySearch)
   - [#  11] ROR binary_search: 
--------------------------------------------------------------------------------
  27:     if low > high:
  28:         return False
  29:     else:
  30:         mid = (low + high) // 2
- 31:         if target == data[mid]:
+ 31:         if target != data[mid]:
  32:             return True
  33:         elif target < data[mid]:
  34:             
  35:             return binary_search(data, target, low, mid - 1)
--------------------------------------------------------------------------------
[0.00000 s] killed by test_element_not_found (test_binary_search.TestBinarySearch)
   - [#  12] ROR binary_search: 
--------------------------------------------------------------------------------
  29:     else:
  30:         mid = (low + high) // 2
  31:         if target == data[mid]:
  32:             return True
- 33:         elif target < data[mid]:
+ 33:         elif target > data[mid]:
  34:             
  35:             return binary_search(data, target, low, mid - 1)
  36:         else:
  37:             
--------------------------------------------------------------------------------
[0.00000 s] killed by test_large_input_element_found (test_binary_search.TestBinarySearch)
   - [#  13] ROR binary_search: 
--------------------------------------------------------------------------------
  29:     else:
  30:         mid = (low + high) // 2
  31:         if target == data[mid]:
  32:             return True
- 33:         elif target < data[mid]:
+ 33:         elif target <= data[mid]:
  34:             
  35:             return binary_search(data, target, low, mid - 1)
  36:         else:
  37:             
--------------------------------------------------------------------------------
[0.00000 s] survived
[*] Mutation score [0.41001 s]: 91.7%
   - all: 13
   - killed: 11 (84.6%)
   - survived: 1 (7.7%)
   - incompetent: 1 (7.7%)
   - timeout: 0 (0.0%)
